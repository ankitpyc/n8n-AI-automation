name: Keep n8n Service Alive

on:
  schedule:
    # Ping every 12 minutes to prevent Render free tier sleep (adjust as needed)
    - cron: '*/12 * * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  ping-n8n:
    runs-on: ubuntu-latest
    
    steps:
    - name: Ping n8n Instance
      run: |
        echo "Pinging n8n instance to keep it alive..."
        
        # Use your custom secret name
        N8N_URL="${{ secrets.N8N_SECRET_URL }}"
        
        if [ -z "$N8N_URL" ]; then
          echo "‚ùå N8N_SECRET_URL secret not set"
          exit 1
        fi
        
        echo "üîó Attempting to reach: $N8N_URL"
        
        # Function to ping with retries
        ping_with_retry() {
          local url=$1
          local max_retries=3
          local timeout=60
          local retry_count=0
          
          while [ $retry_count -lt $max_retries ]; do
            retry_count=$((retry_count + 1))
            echo "üîÑ Attempt $retry_count of $max_retries (timeout: ${timeout}s)..."
            
            response=$(curl -s -o /dev/null -w "%{http_code}" --max-time $timeout --connect-timeout 30 "$url" 2>/dev/null || echo "timeout")
            
            case "$response" in
              "200"|"401"|"403"|"302")
                echo "‚úÖ Successfully pinged n8n instance (HTTP $response)"
                echo "Service is alive and responding"
                return 0
                ;;
              "timeout"|"000")
                echo "‚ö†Ô∏è  Attempt $retry_count timed out or failed"
                if [ $retry_count -lt $max_retries ]; then
                  echo "‚è≥ Waiting 10 seconds before retry..."
                  sleep 10
                fi
                ;;
              *)
                echo "‚ö†Ô∏è  Received HTTP $response from n8n instance"
                if [ "$response" -ge 500 ]; then
                  echo "Server error - service might be starting up"
                  if [ $retry_count -lt $max_retries ]; then
                    echo "‚è≥ Waiting 10 seconds before retry..."
                    sleep 10
                  fi
                elif [ "$response" -ge 400 ]; then
                  echo "Client error - but service is responding"
                  return 0
                else
                  echo "Unexpected response code"
                  return 0
                fi
                ;;
            esac
          done
          
          echo "‚ùå All $max_retries attempts failed"
          echo "Note: Even failed requests help wake up sleeping Render services"
          return 1
        }
        
        # Ping the main n8n instance with retries
        ping_with_retry "$N8N_URL"
        main_result=$?
        
        # Optional: Try health endpoint if main ping succeeded
        if [ $main_result -eq 0 ]; then
          echo "üîç Checking health endpoint..."
          health_response=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 "$N8N_URL/healthz" 2>/dev/null || echo "000")
          
          if [ "$health_response" = "200" ]; then
            echo "‚úÖ Health check endpoint responding (HTTP $health_response)"
          elif [ "$health_response" != "000" ]; then
            echo "‚ÑπÔ∏è  Health endpoint returned HTTP $health_response"
          else
            echo "‚ÑπÔ∏è  Health endpoint not available or timed out"
          fi
        fi
        
        echo "Ping completed at $(date)"
        
        # Don't fail the action even if all retries failed
        # The ping attempts themselves help wake up the service
        exit 0

    - name: Log Status
      if: always()
      run: |
        echo "Keep-alive job completed"
        echo "Next scheduled run in 12 minutes"
